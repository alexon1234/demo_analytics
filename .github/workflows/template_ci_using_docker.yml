
name: Tinybird CI

on:
  workflow_call:
    inputs:
      data_project_dir:
        description: "relative path of the folder containing the data project"
        required: false
        type: string
        default: .
    secrets:
      tb_admin_token:
        required: true
      tb_host:
        required: true

env:
  TB_TOKEN: ${{ secrets.tb_admin_token }}
  TB_HOST: ${{ secrets.tb_host }}


#     steps:
#     - uses: actions/checkout@v3
#       with:
#         fetch-depth: 0
#     - run: pwd && ls -ltrha
#     - run: apt update && apt upgrade -y
#     # This is a hack because git diff isn't just for git -_-
#     - run: git config --global --add safe.directory /work
#     - run: pip install tinybird-cli==3.0.0.dev13
#     - run: cd integrations/tinybird && tb pull --auto
#     - run: cd integrations/tinybird && tb fmt --yes ./**/*.{datasource,pipe}
#     - if: github.event_name == 'pull_request' && github.ref_name != 'merge'
#       run: tb branch create ci_pull_request_$(echo ${{ github.ref_name }} | rev | cut -d "/" -f 1 | rev | tr '.-' '_') || echo 'Branch already created'
#     # allow deploying to branches
#     # - if: github.event_name == 'push'
#     #   run: tb branch create ci_branch_$(echo ${{ github.ref_name }} | rev | cut -d "/" -f 1 | rev | tr '.-' '_') || echo 'Branch already created'
#     - run: cd integrations/tinybird && tb branch use ci_pull_request_$(echo ${{ github.ref_name }} | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
#     - run: cd integrations/tinybird && tb push --push-deps --yes
#     - run: tb test run -c 5 ./**/*.{test} || exit 0

jobs:
  deploy:
    name: Deploy to CI Branch
    runs-on: ubuntu-latest
    container:
      image: tinybirdco/tinybird-cli-docker:latest
    defaults:
      run:
        working-directory: ${{ inputs.data_project_dir }}
        shell: bash
        
    if: ${{ github.event.action != 'closed' }}
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          # ref: ${{ github.event.pull_request.head.sha }}
          
      - run: apt update && apt upgrade -y && apt install -y python3-pip
      - run: git config --global --add safe.directory  ${{ inputs.data_project_dir }}

      - name: Validate input
        run: |
          [[ "${{ env.TB_TOKEN }}" ]] || { echo "Go to the tokens section in your Workspace, copy the 'admin token' and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1; }

      - name: Set environment variables
        run: |
          _ENV_FLAGS="${ENV_FLAGS:=--last-partition --wait}"
          _NORMALIZED_BRANCH_NAME=$(echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
          GIT_BRANCH=${GITHUB_HEAD_REF}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
          echo "_ENV_FLAGS=$_ENV_FLAGS" >> $GITHUB_ENV
          echo "_NORMALIZED_BRANCH_NAME=$_NORMALIZED_BRANCH_NAME" >> $GITHUB_ENV
          grep -v '^#' .tinyenv >> $GITHUB_ENV
          echo >> $GITHUB_ENV # Ensures new line at the end of the file

      - name: Tinybird version
        run: tb --version

      - name: Check all the data files syntax
        run: tb check  

      - name: Check auth
        run: tb --host ${{ env.TB_HOST }} --token ${{ env.TB_TOKEN }} auth info

      - name: Try delete previous Branch
        run: |
          output=$(tb --host ${{ env.TB_HOST }} --token ${{ env.TB_TOKEN }} branch ls)
          BRANCH_NAME="tmp_ci_${_NORMALIZED_BRANCH_NAME}_${{ github.event.pull_request.number }}"

          # Check if the branch name exists in the output
          if echo "$output" | grep -q "\b$BRANCH_NAME\b"; then
              tb \
                --host ${{ env.TB_HOST }} \
                --token ${{ env.TB_TOKEN }} \
                branch rm $BRANCH_NAME \
                --yes
          else
              echo "Skipping clean up: The Branch '$BRANCH_NAME' does not exist."
          fi

      - name: Create new test Branch with data
        run: |
          tb \
          --host ${{ env.TB_HOST }} \
          --token ${{ env.TB_TOKEN }} \
          branch create tmp_ci_${_NORMALIZED_BRANCH_NAME}_${{ github.event.pull_request.number }} \
          ${_ENV_FLAGS}

      - name: Deploy changes to the test Branch
        run: |
            source .tinyenv
            DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
            if [ ! -f "$DEPLOY_FILE" ]; then
              echo "$DEPLOY_FILE not found, running default tb deploy command"
              tb --semver ${VERSION} deploy ${CI_FLAGS}
              tb release ls
            fi

      - name: Custom deployment to the test Branch
        run: |
            source .tinyenv
            DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
            if [ -f "$DEPLOY_FILE" ]; then
              echo "$DEPLOY_FILE found"
              if ! [ -x "$DEPLOY_FILE" ]; then
                echo "Error: You do not have permission to execute '$DEPLOY_FILE'. Run:"
                echo "> chmod +x $DEPLOY_FILE"
                echo "and commit your changes"
                exit 1
              else
                $DEPLOY_FILE
              fi
            fi

  test:
    name: Run tests
    needs:
      - deploy
    runs-on: ubuntu-latest
    container:
      image: tinybirdco/tinybird-cli-docker:latest
    defaults:
      run:
        working-directory: ${{ inputs.data_project_dir }}
        shell: bash
    if: ${{ github.event.action != 'closed' }}
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Validate input
        run: |
          [[ "${{ env.TB_TOKEN }}" ]] || { echo "Go to the tokens section in your Workspace, copy the 'admin token (user@domain.com)' associated to a user account and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1; }
      - name: Set environment variables
        run: |
          _ENV_FLAGS="${ENV_FLAGS:=--last-partition --wait}"
          _NORMALIZED_ENV_NAME=$(echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
          GIT_BRANCH=${GITHUB_HEAD_REF}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
          echo "_ENV_FLAGS=$_ENV_FLAGS" >> $GITHUB_ENV
          echo "_NORMALIZED_ENV_NAME=$_NORMALIZED_ENV_NAME" >> $GITHUB_ENV
          grep -v '^#' .tinyenv >> $GITHUB_ENV
          echo >> $GITHUB_ENV # Ensures new line at the end of the file

      - name: Tinybird version
        run: tb --version

      - name: Check auth
        run: tb --host ${{ env.TB_HOST }} --token ${{ env.TB_TOKEN }} auth info

      - name: Use Branch
        run: |
          BRANCH_NAME="tmp_ci_${_NORMALIZED_BRANCH_NAME}_${{ github.event.pull_request.number }}"
          tb --host ${{ env.TB_HOST }} --token ${{ env.TB_TOKEN }} branch use $BRANCH_NAME

      - name: Get env token
        run: |
          ENV_TOKEN=$(python -c "import json; print(json.load(open('.tinyb'))['token'])")
          echo "::add-mask::$ENV_TOKEN"
          echo "TB_ENV_TOKEN=$ENV_TOKEN" >> $GITHUB_ENV

      - name: Post deploy
        run: |
          POSTDEPLOY_FILE=./deploy/${VERSION}/postdeploy.sh
          if [ -f "$POSTDEPLOY_FILE" ]; then
            if ! [ -x "$POSTDEPLOY_FILE" ]; then
              echo "Error: You do not have permission to execute '$POSTDEPLOY_FILE'. Run:"
              echo "> chmod +x $POSTDEPLOY_FILE"
              echo "and commit your changes"
              exit 1
            else
              $POSTDEPLOY_FILE
            fi
          fi

      - name: Get regression labels
        id: regression_labels
        uses: alrocar/get-labels-action@v1.0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          label_key: regression
  
      - name: Run pipe regression tests
        run: |
          source .tinyenv
          echo ${{ steps.regression_labels.outputs.labels }}
          REGRESSION_LABELS=$(echo "${{ steps.regression_labels.outputs.labels }}" | awk -F, '{for (i=1; i<=NF; i++) if ($i ~ /^--/) print $i}' ORS=',' | sed 's/,$//')
          echo ${REGRESSION_LABELS}

          CONFIG_FILE=./tests/regression.yaml
          BASE_CMD="tb branch regression-tests"
          LABELS_CMD="$(echo ${REGRESSION_LABELS} | tr , ' ')"
          if [ -f ${CONFIG_FILE} ]; then
              echo "Config file found: ${CONFIG_FILE}"
              ${BASE_CMD} -f ${CONFIG_FILE} --wait ${LABELS_CMD}
          else
              echo "Config file not found at '${CONFIG_FILE}', running with default values"
              ${BASE_CMD} coverage --wait ${LABELS_CMD}
          fi

      - name: Append fixtures
        run: |
          if [ -f ./scripts/append_fixtures.sh ]; then
            echo "append_fixtures script found"
            ./scripts/append_fixtures.sh $VERSION
          fi

      - name: Run fixture tests
        run: |
          if [ -f ./scripts/exec_test.sh ]; then
            ./scripts/exec_test.sh $VERSION
          fi

      - name: Run data quality tests
        run: |
          tb --semver $VERSION test run -v -c 4

  cleanup:
    runs-on: ubuntu-latest
    container:
      image: tinybirdco/tinybird-cli-docker:latest
    defaults:
      run:
        working-directory: ${{ inputs.data_project_dir }}
        shell: bash
    if: ${{ github.event.action == 'closed' }}
    steps:
      - uses: actions/checkout@master

      - name: Validate input
        run: |
          [[ "${{ env.TB_TOKEN }}" ]] || { echo "Go to the tokens section in your Workspace, copy the 'admin token' and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1; }

      - name: Tinybird version
        run: tb --version       

      - name: Try delete previous Branch
        run: |
          output=$(tb --host ${{ env.TB_HOST }} --token ${{ env.TB_TOKEN }} branch ls)
          BRANCH_NAME="tmp_ci_${_NORMALIZED_BRANCH_NAME}_${{ github.event.pull_request.number }}"

          # Check if the branch name exists in the output
          if echo "$output" | grep -q "\b$BRANCH_NAME\b"; then
              tb \
                --host ${{ env.TB_HOST }} \
                --token ${{ env.TB_TOKEN }} \
                branch rm $BRANCH_NAME \
                --yes
          else
              echo "Skipping clean up: The Branch '$BRANCH_NAME' does not exist."
          fi
